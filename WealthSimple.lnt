module WealthSimple with set, get is

    channel Uid is (id: Nat) end channel
    channel Balance is (id: Nat, balance: Nat) end channel
    channel UTransaction is (id: Nat, amount: Nat, transactType: TransactionType) end channel
    channel Stock is (id: Nat, symbol: StockSymbol) end channel
    channel Price is (id: Nat, symbol: StockSymbol, amount: Nat) end channel
    channel UTrade is (id: Nat, symbol: StockSymbol, amount: Nat, tradeType: TradeType) end channel

    channel WSPriceCheck is (id: Nat, symbol: StockSymbol) end channel
    channel WSPriceSend is (id: Nat, symbol: StockSymbol, price: Nat) end channel
    channel WSTrade is (id: Nat, symbol: StockSymbol, amount: Nat, tradeType: TradeType) end channel
    channel WSConfirmTrade is (id: Nat, symbol: StockSymbol, amount: Nat, tradeType: TradeType) end channel

    type StockSymbol is
        AAPL, NVDA, TSLA, AMZN
    end type

    type BalanceArray is
        array [1 .. 5] of Nat
    end type

    type TransactionType is 
        Deposit, Withdraw with ==
    end type

    type TradeType is 
        Buy, Sell with ==
    end type

    process User [DISPLAYBALANCE, GETBALANCE: Uid, RECIVEBALANCE: Balance, TRANSACTION: UTransaction, CHECKPRICE: Stock, RECIVEPRICE: Price, TRADE: UTrade] (ID: Nat) is
        var disBalance: Nat in
            disBalance := 0;
            loop
                select
                    if disBalance != 0 then
                        DISPLAYBALANCE(disBalance)
                    end if
                []
                    GETBALANCE(ID);
                    var uid: Nat, newBalance: Nat in
                        RECIVEBALANCE(?uid, ?newBalance);
                        if uid == ID then
                            disBalance := newBalance
                        end if
                    end var
                []
                    var a: Nat, t: TransactionType in
                        t := any TransactionType;
                        TRANSACTION(ID, ?a, t) where (a == 5) or (a == 10) or (a == 20)
                    end var;
                    var uid: Nat, newBalance: Nat in
                        RECIVEBALANCE(?uid, ?newBalance);
                        if uid == ID then
                            disBalance := newBalance
                        end if
                    end var
                []
                    var symbol: StockSymbol in
                        symbol := any StockSymbol;
                        CHECKPRICE(ID, symbol)
                    end var;
                    --var uid: Nat in -- , symbol: StockSymbol, price: Nat
                        RECIVEPRICE(?any Nat, ?any StockSymbol, ?any Nat)
                    --end var
                []
                    var a: Nat, s: StockSymbol, t: TradeType in
                        s := any StockSymbol;
                        t := any TradeType;
                        TRADE(ID, s, ?a, t) where (a == 5) or (a == 10) or (a == 20)
                    end var;
                    var uid: Nat, newBalance: Nat in
                        RECIVEBALANCE(?uid, ?newBalance);
                        if uid == ID then
                            disBalance := newBalance
                        end if
                    end var
                end select
            end loop
        end var
    end process

    process WSAccount [GETBALANCE: Uid, SENDBALANCE: Balance, TRANSACTION: UTransaction, CHECKPRICE: Stock, SENDPRICE: Price, UTRADE: UTrade, WSCHECKPRICE: WSPriceCheck, WSSENDPRICE: WSPriceSend, WSTRADE: WSTrade, WSCONFIRMTRADE: WSConfirmTrade] is
        var balances: BalanceArray in

            -- Init balances
            balances := BalanceArray(0 of Nat);

            loop
                var uid: Nat in
                    select
                        GETBALANCE(?uid);
                        SENDBALANCE(uid, balances[uid])
                    []
                        var amount: Nat, transactType: TransactionType in
                            TRANSACTION(?uid, ?amount, ?transactType);
                            if uid < 6 then
                                if (transactType == Deposit) and (balances[uid] <= 235) then
                                    balances[uid] := balances[uid] + amount
                                elsif (transactType == Withdraw) and (balances[uid] >= amount) then
                                    balances[uid] := balances[uid] - amount
                                end if
                            end if;
                            SENDBALANCE(uid, balances[uid])
                        end var
                    []
                        var symbol: StockSymbol, price: Nat in
                            CHECKPRICE(?uid, ?symbol);
                            
                            WSCHECKPRICE(uid, symbol);
                            WSSENDPRICE(?uid, ?symbol, ?price);

                            SENDPRICE(uid, symbol, price)
                        end var
                    []
                        var symbol: StockSymbol, amount: Nat, tradeType: TradeType in
                            UTRADE(?uid, ?symbol, ?amount, ?tradeType);
                            
                            WSTRADE(uid, symbol, amount, tradeType);
                            WSCONFIRMTRADE(?uid, ?any StockSymbol, ?any Nat, ?any TradeType);

                            SENDBALANCE(uid, balances[uid])
                        end var
                    end select
                end var
            end loop
        end var
    end process


    process StockMarketAPI [WSCHECKPRICE: WSPriceCheck, WSSENDPRICE: WSPriceSend, TRADE: WSTrade, CONFIRMTRADE: WSConfirmTrade] is 
        loop
            select
                -- Handles receiving and sending stock prices on Channel WSPrice
                var id: Nat, symbo: StockSymbol, price: Nat in 
                    WSCHECKPRICE(?id, ?symbo);
                    case symbo in
                            AAPL -> price := 20 of Nat
                        |   NVDA -> price := 15 of Nat
                        |   TSLA -> price := 10 of Nat
                        |   AMZN -> price := 5 of Nat
                    end case;
                    WSSENDPRICE(id, symbo, price)
                end var
            []
                --Handles Mock trade confirmations
                var id: Nat, symbol: StockSymbol, amount: Nat, tradeType: TradeType in 
                    TRADE(?id, ?symbol, ?amount, ?tradeType);
                    -- Mock confirmed...
                    CONFIRMTRADE(id, symbol, amount, tradeType)
                end var
            end select
        end loop
    end process

    process BankAccountAPI [SENDCONFIRMATION: Balance, DEPOSIT: Amount, WITHDRAW: Amount ] is
    var balances: BalanceArray in
     -- Init balances
            balances := BalanceArray(200 of Nat);

            loop
                var uid: Nat in
                    select
                        var amount: Nat in
                            DEPOSIT(?uid, ?amount);
                            if (uid < 6) and (balances[uid] <= 235) then
                                balances[uid] := balances[uid] + amount
                            end if;
                            SENDCONFIRMATION(uid, balances[uid])
                        end var
                    []
                        var amount: Nat in
                            WITHDRAW(?uid, ?amount);
                            if (uid < 6) and (balances[uid] >= amount) then
                                balances[uid] := balances[uid] - amount
                            end if;
                            SENDCONFIRMATION(uid, balances[uid])
                        end var
                    end select
                end var
            end loop
        end var
    end process

    process Main [
                    DISPLAYBALANCE,
                    GETBALANCE: Uid,
                    SENDBALANCE: Balance,
                    TRANSACTION: UTransaction,
                    CHECKPRICE: Stock,
                    SENDPRICE: Price,
                    UTRADE: UTrade,
                    WSCHECKPRICE: WSPriceCheck,
                    WSSENDPRICE: WSPriceSend,
                    WSTRADE: WSTrade,
                    CONFIRMTRADE: WSConfirmTrade
                ] is
        var u1: Nat in
            u1 := 1;
            par
                GETBALANCE, SENDBALANCE, TRANSACTION, CHECKPRICE, SENDPRICE, UTRADE, WSCHECKPRICE, WSSENDPRICE, WSTRADE, CONFIRMTRADE -> WSAccount [GETBALANCE, SENDBALANCE, TRANSACTION, CHECKPRICE, SENDPRICE, UTRADE, WSCHECKPRICE, WSSENDPRICE, WSTRADE, CONFIRMTRADE]
                ||
                GETBALANCE, SENDBALANCE, TRANSACTION, CHECKPRICE, SENDPRICE, UTRADE -> User [DISPLAYBALANCE, GETBALANCE, SENDBALANCE, TRANSACTION, CHECKPRICE, SENDPRICE, UTRADE] (u1)
                ||
                WSCHECKPRICE, WSSENDPRICE, WSTRADE, CONFIRMTRADE -> StockMarketAPI[WSCHECKPRICE, WSSENDPRICE, WSTRADE, CONFIRMTRADE]
                ||
                DEPOSIT, WITHDRAW -> BankAccountAPI[SENDCONFIRMATION, WITHDRAW, DEPOSIT]
            end par
        end var
    end process

end module